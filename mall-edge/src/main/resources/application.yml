server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/mall
        registration:
          keycloak:
            client-id: edge-service
            client-secret: mall-keycloak-secret
            scope: openid,roles
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 # 5s
      request-read-timeout: 5000    # 5s
      fail-fast: false              # In production, set to true
      retry:
        initial-interval: 1000      # 1s
        max-attempts: 6
        max-interval: 2000          # 2s
        multiplier: 1.1
    #  https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/index.html
    gateway:
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession
        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        # RetryGatewayFilterFactory: double click SHIRT
        # https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/index.html#the-retry-gatewayfilter-factory
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
              factor: 2
              basedOnPreviousValue: false
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  session:
    timeout: 10m
    redis:
      namespace: mall:edge

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 20
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15s
  timelimiter:
    configs:
      default:
        timeout-duration: 5s

logging:
  group:
    circuitbreacker: io.github.resilience4j,org.springframework.cloud.circuitbreaker
  level:
    circuitbreacker: info
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  endpoint:
    health:
      show-components: always
      show-details: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState, redis
  metrics:
    tags:
      application: ${spring.application.name}